C     THIS IS A WORKING VERSION OF THE SUBROUTINE, BUT IT ALSO PARTITIONS
C     THE RESULTS BY COMPONENT-TYPE OVERLAP AND OCCUPIED ORBITAL... AND ALSO
C     BY SYMMETRY-TYPE MANIFOLD.
C
      SUBROUTINE SLFLW0(YMAT,IZ,KQNA)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C**********************************************************************C
C                                                                      C
C       SSSSSS  LL       FFFFFFFF LL       WW         WW  000000       C
C      SS    SS LL       FF       LL       WW         WW 00   000      C
C      SS       LL       FF       LL       WW         WW 00  0000      C
C       SSSSSS  LL       FFFFFF   LL       WW    W    WW 00 00 00      C
C            SS LL       FF       LL        WW  WWW  WW  0000  00      C
C      SS    SS LL       FF       LL         WWWW WWWW   000   00      C
C       SSSSSS  LLLLLLLL FF       LLLLLLLL    WW   WW     000000       C
C                                                                      C
C -------------------------------------------------------------------- C
C  SLFLW0 GENERATES ATOMIC ELECTRON SELF-INTERACTION (LOW-ENERGY)      C
C  MATRIX ELEMENTS FOR SYMMETRY TYPE KQNA USING THE BETHE FORMULATION. C
C -------------------------------------------------------------------- C
C  ▶ THE `LL' COMPONENT OF THIS CAN BE USED IN THE 'NORL' OPTION BUT   C
C    THE INPUT DECK ASSUMES THAT 'DHFQ' MEANS RELATIVISTIC.            C
C**********************************************************************C
      INCLUDE 'parameters.h'
      INCLUDE 'scfoptions.h'
C
      CHARACTER*5 NMDL
C
      COMPLEX*16 SPINDOT
      COMPLEX*16 COEF(MDM,MDM)
C
      DIMENSION YMAT(MBD,MBD)
      DIMENSION RNLL(MBS,MBS),RNLS(MBS,MBS),RNSL(MBS,MBS),RNSS(MBS,MBS)
      DIMENSION EX2(MBS,2),LQ2(2),NBS2(2)
      DIMENSION PIJLS(MBS,MBS),PIJSL(MBS,MBS)
      DIMENSION PINLS(MBS,MBS),PINSL(MBS,MBS)
      DIMENSION PMNLS(MBS,MBS),PMNSL(MBS,MBS)
      DIMENSION OPRJ(MBD,MBS),ELWM(MBS)
      DIMENSION ETMP(MBS,4),EPRT(MBS,4)
      DIMENSION OLL(MBS,MBS),OSS(MBS,MBS)
C
      COMMON/AUFB/NORB(0:MEL,MKP+1),NUMOCC(0:MEL),LMXCONF
      COMMON/BDIM/NDIM,NSKP,NOCC,NVRT
      COMMON/BNUC/ZNUC(MCT),ANUC(MCT),TFMI(MCT),AFMI(MCT),RNUC(MCT),
     &            FNUC(MCT,MFT),XNUC(MCT,MFT),NNUC(MCT),NMDL(MCT)
      COMMON/BSET/BEXL(MBS,0:MEL,MCT),BXYZ(3,MCT),LRGE(MCT,MKP,MKP+1),
     &            KAPA(MKP,MCT),NFNC(0:MEL,MCT),NKAP(MCT),IQNC(MCT),NCNT
      COMMON/EIGC/COEF
      COMMON/EIGE/EIGN(MDM)
      COMMON/GAMA/GAMLOG(300),GAMHLF(300)
      COMMON/MATH/PI,PI12,PI32,PI52,PILG,TWLG,THLG,TW12,EULR
      COMMON/PHYS/CV,EMSS,UMSS,TMSS,PMSS,PRAD,CMPW,GFREE,GFRMI,WEIN
C
      DATA DEPS/1.0D-2/
C
C     LOW- AND HIGH-ENERGY PARTITION CUTOFF
      CUTK = CV
C
C     AMPLITUDE FOR LOW-ENERGY CONTRIBUTION
      ALW =-2.0D0/(3.0D0*PI*CV)
C
C     DETERMINE THE ORBITAL VALUE LQNA
      LQNA = LVAL(KQNA)
      TLA  = DFLOAT(LQNA+KQNA+1)
C
C     NUMBER OF BASIS FUNCTIONS
      NBASA = NFNC(LQNA,IZ)
      IF(KQNA.LT.0) THEN
        KA =-2*KQNA-1
      ELSE
        KA = 2*KQNA
      ENDIF
C
C     INITIALISE LIST OF ENERGY VALUES
      DO IOCC=1,NUMOCC(LQNA)
        IF(NORB(LQNA,IOCC).NE.0) THEN
          ELWM(IOCC) = 0.0D0
          DO ITT=1,4
            EPRT(IOCC,ITT) = 0.0D0
          ENDDO
        ENDIF
      ENDDO
C
C     PUT CURRENT BLOCK DETAILS IN SOME ARRAYS
      LQ2(1)  = LQNA
      NBS2(1) = NBASA
      DO IBAS=1,NBASA
        EX2(IBAS,1) = BEXL(IBAS,LQNA,IZ)
      ENDDO
C
C     LOOP OVER SYMMETRY TYPES FOR THE VIRTUAL STATES
      DO KB=1,NKAP(IZ)
C
C       DETERMINE THE ORBITAL VALUE LQNB
        KQNB = KAPA(KB,IZ)
        LQNB = LVAL(KQNB)
        TLB  = DFLOAT(LQNB+KQNB+1)
C
C       NUMBER OF BASIS FUNCTIONS
        NBASB = NFNC(LQNB,IZ)
C
C       PUT CURRENT BLOCK DETAILS INTO SOME ARRAYS
        LQ2(2)  = LQNB
        NBS2(2) = NBASB
        DO JBAS=1,NBASB
          EX2(JBAS,2) = BEXL(JBAS,LQNB,IZ)
        ENDDO
C
C       SELECTION RULE: |LA-LB|=1
        IF(IABS(LQNA-LQNB).NE.1) GOTO 101
C       
C       ANGULAR FACTORS OVER THIS KQNA/KQNB BLOCK (WILL BE REAL)
        ALL = 0.0D0
        ALS = 0.0D0
        ASL = 0.0D0
        ASS = 0.0D0
        DO MQNA=-2*IABS(KQNA)+1,2*IABS(KQNA)-1,2
          DO MQNB=-2*IABS(KQNB)+1,2*IABS(KQNB)-1,2
C           I THOUGHT THE SIGNS WOULD BE THE OPPOSITE OF THESE ONES...
            ALL = ALL + DREAL(SPINDOT(2,3,KQNA,KQNB,MQNA,MQNB))
            ALS = ALS - DREAL(SPINDOT(2,2,KQNA,KQNB,MQNA,MQNB))
            ASL = ASL - DREAL(SPINDOT(3,3,KQNA,KQNB,MQNA,MQNB))
            ASS = ASS + DREAL(SPINDOT(3,2,KQNA,KQNB,MQNA,MQNB))
          ENDDO
        ENDDO
C
C       SKIP OPTION (ALL ANGULAR FACTORS ARE ZERO)
        IF(DABS(ALL)+DABS(ALS)+DABS(ASL)+DABS(ASS).LT.1.0D-8) GOTO 101
C
C       RNTT NORMALISATION CONSTANTS FOR THIS BLOCK
        CALL RNORM1(RNLS,EX2,LQ2,NBS2,2)
        CALL RNORM1(RNSL,EX2,LQ2,NBS2,3)
C
C       A BLOCK OF RADIAL INTEGRALS
        LAB = LQNA+LQNB
        GAM = GAMHLF(LAB+2)
        DO IBAS=1,NBASA
          EI = EX2(IBAS,1)
          DO JBAS=1,NBASB
            EJ = EX2(JBAS,2)
C
C           GAUSSIAN PARAMETER COMBINATIONS
            EIJ = EI+EJ
            EP4 = EIJ**(0.5D0*LAB+2.0D0)
C
C           NORMALISED MATRIX ELEMENTS
            PLS = 0.5D0*GAM*(TLB*EIJ-EJ*(LAB+2.0D0))/EP4
            PSL = 0.5D0*GAM*(TLA*EIJ-EI*(LAB+2.0D0))/EP4
            PIJLS(IBAS,JBAS) = RNLS(IBAS,JBAS)*PLS
            PIJSL(IBAS,JBAS) = RNSL(IBAS,JBAS)*PSL
          ENDDO
        ENDDO
C
C       INITIALISE SOME NEW ARRAYS
        DO IBAS=1,NBASA
          DO NPSV=1,NBASB
            PINLS(IBAS,NPSV) = 0.0D0
            PINSL(IBAS,NPSV) = 0.0D0
          ENDDO
        ENDDO
C
C       CONTRACT THE RADIAL INTEGRALS OVER POSITIVE-ENERGY K' STATES
        DO NPSV=1,NBASB
C
C         STARTING ADDRESS FOR THIS BLOCK
          NL = LRGE(IZ,KB,1)
          NS = LRGE(IZ,KB,1)+NSKP
C
C         LOOP OVER BASIS FUNCTIONS IBAS OF BLOCK K
          DO IBAS=1,NBASA
C
C           CONTRACT OVER INDEX JBAS
            DO JBAS=1,NBASB
C
C             COUPLE PLS ELEMENTS WITH SMALL-COMPONENT COEFFICIENTS
              PINLS(IBAS,NPSV) = PINLS(IBAS,NPSV)
     &                  + DREAL(COEF(NS+JBAS,NS+NPSV))*PIJLS(IBAS,JBAS)
C
C             COUPLE PSL ELEMENTS WITH LARGE-COMPONENT COEFFICIENTS
              PINSL(IBAS,NPSV) = PINSL(IBAS,NPSV)
     &                  + DREAL(COEF(NL+JBAS,NS+NPSV))*PIJSL(IBAS,JBAS)
C            
            ENDDO
C
C         END LOOP OVER BASIS FUNCTIONS ON BLOCK K          
          ENDDO
C
C       END LOOP OVER POSITIVE-ENERGY STATES
        ENDDO
C
C       INITIALISE SOME NEW ARRAYS
        DO IOCC=1,NUMOCC(LQNA)
          IF(NORB(LQNA,IOCC).NE.0) THEN
            DO NPSV=1,NBASB
              PMNLS(IOCC,NPSV) = 0.0D0
              PMNSL(IOCC,NPSV) = 0.0D0
            ENDDO
          ENDIF
        ENDDO
C
C       CONTRACT THE RADIAL INTEGRALS OVER POSITIVE-ENERGY K STATES
        DO IOCC=1,NUMOCC(LQNA)
          IF(NORB(LQNA,IOCC).NE.0) THEN
C
C           SUBSHELL OCCUPANCY AND CORRESPONDING MULTIPLICATIVE FACTOR
            NCLS = 2*IABS(KQNA)
            SBFC = 1.0D0/DSQRT(DFLOAT(NCLS))
C
C           STARTING ADDRESS FOR THIS BLOCK
            IL = LRGE(IZ,KA,1)
            IS = LRGE(IZ,KA,1)+NSKP
C
C           LOOP OVER POSITIVE-ENERGY STATES OF BLOCK K'
            DO NPSV=1,NBASB
C
C             CONTRACT OVER INDEX JBAS
              DO IBAS=1,NBASA
C
C               COUPLE PLS ELEMENTS WITH SMALL-COMPONENT COEFFICIENTS
                PMNLS(IOCC,NPSV) = PMNLS(IOCC,NPSV)
     &             + SBFC*DREAL(COEF(IL+IBAS,IS+IOCC))*PINLS(IBAS,NPSV)
C
C               COUPLE PSL ELEMENTS WITH LARGE-COMPONENT COEFFICIENTS
                PMNSL(IOCC,NPSV) = PMNSL(IOCC,NPSV)
     &             + SBFC*DREAL(COEF(IS+IBAS,IS+IOCC))*PINSL(IBAS,NPSV)
C            
              ENDDO
C
C           END LOOP OVER BASIS FUNCTIONS ON BLOCK K          
            ENDDO
C
C         END LOOP OVER OCCUPIED STATES
          ENDIF
        ENDDO
C
C
C       MATRIX ELEMENTS  <IOCC|Γ|IOCC>
        DO IOCC=1,NUMOCC(LQNA)
          IF(NORB(LQNA,IOCC).NE.0) THEN
C
C           STARTING ADDRESS FOR THIS BLOCK
            IS = LRGE(IZ,KA,1)+NSKP
C
C           REFERENCE ENERGY
            EI = EIGN(IS+IOCC)
C
C           SUM OVER K' SPECTRUM
            DO ITT=1,4
              ETMP(IOCC,ITT) = 0.0D0
            ENDDO
          
            SE = 0.0D0
          
            DO NPSV=1,NBASB
C
C             STARTING ADDRESS FOR THIS BLOCK
              NS = LRGE(IZ,KB,1)+NSKP
C
C             STARTING ADDRESS IN FOCK MATRIX AND ENERGY LEVEL
              EN = EIGN(NS+NPSV)
C
C             ENERGY DIFFERENCE
              DEIN = EI-EN
C
C             MANUALLY SKIP CASES OF DEGENERATE ENERGY LEVELS
              IF(DABS(DEIN).GT.DEPS) THEN
C
C               LOGARITHMIC ENERGY TERM
                DTRM = (CV*CUTK-DEIN)/DABS(DEIN)
                DTRM = DEIN*DLOG(DTRM)
C
C               VECTOR DOT PRODUCT OF TRANSITION CURRENTS
                DOT = ALL*PMNLS(IOCC,NPSV)*PMNLS(IOCC,NPSV)
     &              + ALS*PMNLS(IOCC,NPSV)*PMNSL(IOCC,NPSV)
     &              + ASL*PMNSL(IOCC,NPSV)*PMNLS(IOCC,NPSV)
     &              + ASS*PMNSL(IOCC,NPSV)*PMNSL(IOCC,NPSV)
C
C               MATRIX ELEMENT
                ELWM(IOCC) = ELWM(IOCC) + ALW*DOT*DTRM
                ELL = ALW*DTRM*ALL*PMNLS(IOCC,NPSV)*PMNLS(IOCC,NPSV)
                ELS = ALW*DTRM*ALS*PMNLS(IOCC,NPSV)*PMNSL(IOCC,NPSV)
                ESL = ALW*DTRM*ASL*PMNSL(IOCC,NPSV)*PMNLS(IOCC,NPSV)
                ESS = ALW*DTRM*ASS*PMNSL(IOCC,NPSV)*PMNSL(IOCC,NPSV)
                ETMP(IOCC,1) = ETMP(IOCC,1) + ELL
                ETMP(IOCC,2) = ETMP(IOCC,2) + ELS
                ETMP(IOCC,3) = ETMP(IOCC,3) + ESL
                ETMP(IOCC,4) = ETMP(IOCC,4) + ESS
                EPRT(IOCC,1) = EPRT(IOCC,1) + ELL
                EPRT(IOCC,2) = EPRT(IOCC,2) + ELS
                EPRT(IOCC,3) = EPRT(IOCC,3) + ESL
                EPRT(IOCC,4) = EPRT(IOCC,4) + ESS
 
              ENDIF
C
            ENDDO
          ENDIF
        ENDDO
C
700     FORMAT(I2,1X,6(F21.10,1X))
C
C       SKIP POINT FOR ANGULAR SELECTION RULE
101     CONTINUE
C
C     END LOOP OVER KQNB
      ENDDO
C
C     WE NOW HAVE ACCESS TO <IOCC|Γ|IOCC>
C
C**********************************************************************C
C     APPLY PROJECTION OPERATOR TO GENERATE VSLF (MEAN-FIELD)          C
C**********************************************************************C
C
C     WITH THE ACCUMULATED STATES <IOCC|Γ|IOCC>, PROJECT ONTO OVERLAP
      DO IBAS=1,2*NBASA
        DO JBAS=1,2*NBASA
          YMAT(IBAS,JBAS) = 0.0D0
        ENDDO
      ENDDO
C
C     PUT CURRENT BLOCK DETAILS IN SOME ARRAYS
      LQ2(2)  = LQNA
      NBS2(2) = NBASA
      DO JBAS=1,NBASA
        EX2(JBAS,2) = BEXL(JBAS,LQNA,IZ)
      ENDDO
C
C     RNTT NORMALISATION CONSTANTS FOR THIS BLOCK
      CALL RNORM1(RNLL,EX2,LQ2,NBS2,1)
      CALL RNORM1(RNSS,EX2,LQ2,NBS2,4)
C
C     GENERATE OVERLAP MATRICES
      GLL = GAMHLF(2*LQNA+3)
      GSS = GAMHLF(2*LQNA+5)
      DO IBAS=1,NBASA
        EI = EX2(IBAS,1)
        DO JBAS=1,NBASA
          EJ  = EX2(JBAS,2)
          EIJ = EI+EJ
          EPR = EI*EJ
          T32 = DFLOAT(LQNA)+1.5D0
          T52 = DFLOAT(LQNA)+2.5D0
          E32 = EIJ**T32
          E52 = EIJ**T52
          OLL(IBAS,JBAS) = 0.5D0*RNLL(IBAS,JBAS)*GLL/E32
          OSS(IBAS,JBAS) = 2.0D0*RNSS(IBAS,JBAS)*GSS*EPR/E52
        ENDDO
      ENDDO
C
C     LOOP OVER BASIS FUNCTIONS IN THIS LQNA BLOCK
      DO IBAS=1,NBASA
        KBAS = IBAS+NBASA
C
C       STARTING ADDRESS FOR THIS BLOCK
        IL = LRGE(IZ,KA,1)
        IS = LRGE(IZ,KA,1)+NSKP
C
C       LOOP OVER ALL OCCUPIED SUBSHELLS OF THIS KQN TYPE GIVEN MQN
        DO IOCC=1,NUMOCC(LQNA)
          IF(NORB(LQNA,IOCC).NE.0) THEN
            OPRJ(IBAS,IOCC) = 0.0D0
            OPRJ(KBAS,IOCC) = 0.0D0
            DO JBAS=1,NBASA
              LBAS = JBAS+NBASA
              OPRJ(IBAS,IOCC) = OPRJ(IBAS,IOCC)
     &                        + COEF(IL+JBAS,IS+IOCC)*OLL(IBAS,JBAS)
              OPRJ(KBAS,IOCC) = OPRJ(KBAS,IOCC)
     &                        + COEF(IS+JBAS,IS+IOCC)*OSS(IBAS,JBAS)
            ENDDO
          
          ENDIF
        ENDDO
C
      ENDDO
C
C     GENERATE THE MEAN-FIELD-COMPATIBLE MATRIX ELEMENTS
      DO IBAS=1,NBASA
        KBAS = IBAS+NBASA
        DO IOCC=1,NUMOCC(LQNA)
          IF(NORB(LQNA,IOCC).NE.0) THEN
            ZLL = OPRJ(IBAS,IOCC)*ELWM(IOCC)
            ZSS = OPRJ(KBAS,IOCC)*ELWM(IOCC)
            DO JBAS=1,NBASA
              LBAS = JBAS+NBASA
              YMAT(IBAS,JBAS) = YMAT(IBAS,JBAS) + ZLL*OPRJ(JBAS,IOCC)
              YMAT(IBAS,LBAS) = YMAT(IBAS,LBAS) + ZLL*OPRJ(LBAS,IOCC)
              YMAT(KBAS,JBAS) = YMAT(KBAS,JBAS) + ZSS*OPRJ(JBAS,IOCC)
              YMAT(KBAS,LBAS) = YMAT(KBAS,LBAS) + ZSS*OPRJ(LBAS,IOCC)
            ENDDO
          ENDIF
        ENDDO
      ENDDO
C
      RETURN
      END

